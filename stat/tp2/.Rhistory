class.source="badCode")
opts_knit$set(width=75)
library(corrplot)
Data = read.table("wine.txt",header=TRUE)
head(Data)
attributes(Data)
str(Data)
Data$Qualite=as.factor(Data$Qualite)
Data$Type=factor(Data$Type,labels=c("blanc","rouge"))
head(Data)
summary(Data)
levels(Data$Type)
summary(Data$Type)
EffType = as.vector(table(Data$Type))
EffType
Freq = EffType/length(Data$Type)
knitr::kable(data.frame(modalite=levels(Data$Type),Eff=EffType,Freq=Freq), caption = 'Description de la variable Type',booktabs = TRUE,digits=3)
EffQual=as.vector(table(Data$Qualite))
FreqQual= data.frame(Eff = EffQual, Freq = EffQual/length(Data$Qualite), FreqCumul=cumsum(EffQual)/length(Data$Qualite))
rownames(FreqQual)=levels(Data$Qualite)
knitr::kable(FreqQual, caption = 'Description de la variable Qualite',booktabs = TRUE,digits=3)
par(mfrow=c(1,3))
pie(table(Data$Type))
barplot(table(Data$Type),main="Effectifs")
barplot(table(Data$Type)/nrow(Data),main="Frequences")
par(mfrow=c(1,3))
pie(table(Data$Qualite))
barplot(table(Data$Qualite)/nrow(Data),main="Frequences")
barplot(cumsum(table(Data$Qualite))/nrow(Data),main="Freq. cumulées")
mean(Data$Alcool)
var(Data$Alcool)
sd(Data$Alcool)
range(Data$Alcool)
min(Data$Alcool)
max(Data$Alcool)
Data$Alcool
Data
diff(range(Data$Alcool))
median(Data$Alcool)
sort(Data$Alcool)[296:305]
length(Data$Alcool)
quantile(Data$Alcool)
quantile(Data$Alcool,0.9)
q.Alc <- quantile(x = Data$Alcool, probs=c(.25,.75), names=FALSE)
diff(q.Alc)
q.Alc
L=q.Alc + diff(q.Alc) * c(-1.5,1.5) ; L
# valeur adjacente inférieure :
min(Data$Alcool[Data$Alcool>=L[1]])
# valeur adjacente supérieure :
max(Data$Alcool[Data$Alcool<=L[2]])
summary(Data$Alcool)
par(mfrow=c(1,2))
hist(Data$Alcool,main="Histo. des effectifs")
hist(Data$Alcool,freq=FALSE,main="Histo. des fréquences")
H <- hist(Data$Alcool,plot=FALSE)
attributes(H)
H
H
H$breaks # les (K+1) bordures des classes [a_k,a_{k+1}]
H$counts # le nombre de points dans chaque classe
H$density # la hauteur des K classes
H$mids # le milieu des K classes
H$xname # le nom de la variable
H$equidist # découpage régulier
plot(ecdf(Data$Alcool), xlab = 'Variable Alcool', ylab = '',
main = 'Fonction de répartition empirique')
boxplot(Data[,-c(1:2)])
B <- boxplot(Data$SO2lbr,horizontal=TRUE)
attributes(B)
B$stats
median(Data$SO2lbr)
q <- quantile(x = Data$SO2lbr, probs=c(.25,.75), names=FALSE)
q
L=q + diff(q) * c(-1.5,1.5)
min(Data$SO2lbr[Data$SO2lbr>=L[1]])
max(Data$SO2lbr[Data$SO2lbr<=L[2]])
B
summary(B)
B$out
Data$SO2lbr[which(Data$SO2lbr<B$stats[1] | Data$SO2lbr>B$stats[5])]
plot(Data$Alcool,Data$Densite,pch=20,xlab="Alcool",ylab="Densite")
Data$Alcool
Data$Densite
max(Data$Densite)
Data
corrplot(cor(Data[,-c(1:2)]),method="ellipse")
plot(Densite ~ Alcool, data=Data,pch=20)
abline(lm(Densite~Alcool,data=Data),col="red")
lm(Densite~Alcool,data=Data)
par(mfrow=c(1,2))
boxplot(Alcool~Qualite,data=Data)
boxplot(Alcool~Type,data=Data)
table.cont = table(Data$Qualite,Data$Type)
table.cont
mosaicplot(table(Data$Qualite,Data$Type))
mosaicplot(table(Data$Type,Data$Qualite))
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(cor(Data[,-c(1:2)]),method="ellipse")
mosaicplot(table(Data$Qualite,Data$Type))
mosaicplot(table(Data$Type,Data$Qualite))
x = rnorm(5, 4)
x
mean(x)
n=seq(100,10000,100)
mest=NULL
sigma2est=NULL
for (i in 1:length(n)){
x = rnorm(n, 5, 4)                    # echantillon à simuler
mest = c(mest, mean(x))    # estimation de m
sigma2est=c(sigma2est, var(x))  # estimation de sigma2
}
mest
length(mest)
n
sigma2est
n=seq(100,10000,100)
mest=NULL
sigma2est=NULL
for (i in 1:length(n)){
x = rnorm(n, 5, 4)                    # echantillon à simuler
mest = c(mest, mean(x))    # estimation de m
sigma2est=c(sigma2est, (n-1)*var(x))  # estimation de sigma2
}
sigma2est
n=seq(100,10000,100)
mest=NULL
sigma2est=NULL
for (i in 1:length(n)){
x = rnorm(n, 5, 4)                    # echantillon à simuler
mest = c(mest, mean(x))    # estimation de m
sigma2est=c(sigma2est, (n-1)*var(x)/n)  # estimation de sigma2
}
sigma2est
help(sf)
help(sd)
n=seq(100,10000,100)
mest=NULL
sigma2est=NULL
for (i in 1:length(n)){
x = rnorm(n, 5, 4)                    # echantillon à simuler
mest = c(mest, mean(x))    # estimation de m
sigma2est=c(sigma2est, sd(x))  # estimation de sigma2
}
sigma2est
plot(n,mest,pch=20)
abline(h=5,col="blue")
mest
plot(n,sigma2est,pch=20)
abline(h=4,col="blue")
c(-1,1) * qnorm(1-alpha/2)
alpha = 2
alpha = 0.4
c(-1,1) * qnorm(1-alpha/2)
int.conf.moy1 <- function(x,niv.conf,sigma2){
alpha = 1-niv.conf
IC = mean(x) + c(-1,1) * qnorm(1-alpha/2) * (sigma2/sqrt(n))
return(IC)
}
n = c(1, 10, 100, 1000)
n[2]
n = c(1, 10, 100, 1000)
niv.conf = c(0.90, 0.80, 0.70, 0.40)
for (i in 1:length(n)){
for (j in 1:length(niv.conf)){
sigma2 = 4
x = rnorm(n[i], 5, sigma2)
IC = int.conf.moy1(x, niv.conf[j], sigma2)
print(paste("n= ", n[i],", niv.conf= ",niv.conf[j]," : IC vaut [", round(IC[1],3),",",round(IC[2],3),"], il est de longueur",round(IC[2]-IC[1],3), sep=""))
}
}
n = c(1, 10, 100, 1000)
niv.conf = c(0.90, 0.80, 0.70, 0.40)
for (i in 1:length(n)){
for (j in 1:length(niv.conf)){
sigma2 = 4
x = rnorm(n[i], 5, sigma2)
IC = int.conf.moy1(x, niv.conf[j], sigma2)
print(paste("n= ", n[i],", niv.conf=",niv.conf[j]," : IC vaut [", round(IC[1],3),",",round(IC[2],3),"], il est de longueur ",round(IC[2]-IC[1],3), sep=""))
}
}
propconf <- function(K,m){
nb.app=0
for (k in 1:K){
n = 1000
sigma2 = 4
x = rnorm(n, 5, sigma2)
IC = int.conf.moy1(x, niv.conf = 0.95, sigma2 = sigma2)
nb.app = nb.app + (m>=IC[1]) * (m<=IC[2])
}
return(nb.app/K)
}
propconf <- function(K,m){
nb.app=0
for (k in 1:K){
n = 1000
sigma2 = 4
x = rnorm(n, 5, sigma2)
IC = int.conf.moy1(x, niv.conf = 0.95, sigma2 = sigma2)
nb.app = nb.app + (m>=IC[1]) * (m<=IC[2])
}
return(nb.app/K)
}
propconf(100, 5)
propconf(100, 1)
propconf(100, 2)
n = 1000
sigma2 = 4
x = rnorm(n, 5, sigma2)
IC = int.conf.moy1(x, niv.conf = 0.95, sigma2 = sigma2)
IC
(m>=IC[1]) * (m<=IC[2])
propconf(10000, 1)
propconf(100, 1)
propconf(100, 4)
propconf(100, 4.9)
m = 5
for (K in 100:1000)){
m = 5
for (K in 100:1000){
prop = propconf(K, m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", K, "proportion = ", prop), sep=""))
m = 5
for (K in 100:1000){
prop = propconf(K, m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", K, "proportion = ", prop), sep="")
}
m = 5
kk = c(100, 1000)
for (i in length(kk)){
prop = propconf(kk[i], m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", kk[i], "proportion = ", prop), sep="")
}
}
m = 5
kk = c(100, 1000)
for (i in length(kk)){
prop = propconf(kk[i], m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", kk[i], "proportion = ", prop), sep="")
}
m = 5
kk = c(100, 1000)
for (i in 1:length(kk)){
prop = propconf(kk[i], m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", kk[i], "proportion = ", prop), sep="")
}
m = 5
kk = c(100, 1000, 10000)
for (i in 1:length(kk)){
prop = propconf(kk[i], m)
print(paste("m = ", m,", niv.conf = ", 0.95," : K = ", kk[i], "proportion = ", prop), sep="")
}
# A COMPLETER
int.conf.moy2 <- function(x,niv.conf){
alpha = 1-niv.conf
S2 = var(x)
IC = mean(x) + c(-1,1) * qt(1-alpha/2,length(x)-1) * sqrt(S2/n)
return(IC)
}
n = c(1, 10, 100, 1000)
niv.conf = c(0.90, 0.80, 0.70, 0.40)
for (i in 1:length(n)){
for (j in 1:length(niv.conf)){
sigma2 = 4
m = 5
x = rnorm(n[i], m, sigma2)
IC = int.conf.moy2(x, niv.conf[j], sigma2)
print(paste("n= ", n[i],", niv.conf= ",niv.conf[j]," : IC vaut ", IC, sep=""))
}
}
n = c(1, 10, 100, 1000)
niv.conf = c(0.90, 0.80, 0.70, 0.40)
for (i in 1:length(n)){
for (j in 1:length(niv.conf)){
sigma2 = 4
m = 5
x = rnorm(n[i], m, sigma2)
IC = int.conf.moy2(x, niv.conf[j])
print(paste("n= ", n[i],", niv.conf= ",niv.conf[j]," : IC vaut ", IC, sep=""))
}
}
n = c(5, 10, 100, 1000)
niv.conf = c(0.90, 0.80, 0.70, 0.40)
for (i in 1:length(n)){
for (j in 1:length(niv.conf)){
sigma2 = 4
m = 5
x = rnorm(n[i], m, sigma2)
IC = int.conf.moy2(x, niv.conf[j])
print(paste("n= ", n[i],", niv.conf= ",niv.conf[j]," : IC vaut ", IC, sep=""))
}
}
help(t.test)
n = 100
m = 5
sigma2 = 4
x = rnorm(n, m, sigma2)
int.conf.moy1(x,niv.conf=0.95,sigma2=sigma2)
int.conf.moy2(x,niv.conf=0.95)
t.test(x,conf.level=0.95)
pnorm(1)
pnorm(10)
pnorm(0)
test.moy1 <- function(x,sigma2,m0,alternative="greater"){
Zn.obs = sqrt(length(x))*(mean(x)-m0)/sqrt(sigma2)
if(alternative=="two.sided"){
pval = 2-2*pnorm(Zn.obs)
}else{
if(alternative=="greater"){
pval = pnorm(Zn.obs)
}else{
if(alternative=="less"){
pval = 1-pnorm(Zn.obs)
}
}
}
return(pval)
}
(0.5>1)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, 4)
pval = test.moy1(x, sigma2, m, alternative)
nb.rejets = nb.rejets + (pval>alpha)
}
return(nb.rejets/K)
}
test.moy1(x = rnorm(1000, 5, 4), sigma2 = 4, m0 = 5)
test.moy1(x = rnorm(1000, 1, 4), sigma2 = 4, m0 = 5)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, 4)
pval = test.moy1(x, sigma2, m, alternative)
nb.rejets = nb.rejets + ((1-pval)>alpha)
}
return(nb.rejets/K)
}
estim.prop.test.moy1
estim.prop.test.moy1()
estim.prop.test.moy1(m-10)
estim.prop.test.moy1(n=100000)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, 4)
pval = test.moy1(x, sigma2, m0, alternative)
nb.rejets = nb.rejets + ((1-pval)>alpha)
}
return(nb.rejets/K)
}
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=10)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=10)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=10000)
estim.prop.test.moy1(n=10)
estim.prop.test.moy1(n=100)
estim.prop.test.moy1(n=1000)
estim.prop.test.moy1(n=100000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, 4)
pval = test.moy1(x, sigma2, m0, alternative)
nb.rejets = nb.rejets + (pval>alpha)
}
return(nb.rejets/K)
}
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=10000)
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=50000)
puiss.test.moy.1 <- function(n=1000,sigma2=4,m0=5,alpha=0.05,mmax){
theta = seq(m0,mmax,0.01)
puiss = 1-pnorm(qnorm(1-alpha) - sqrt(n)*(theta-m0)/sqrt(sigma2))
return(puiss)
}
puiss.test.moy.1 <- function(n=1000,sigma2=4,m0=5,alpha=0.05,mmax){
theta = seq(m0,mmax,0.01)
puiss = 1-pnorm(qnorm(1-alpha) - sqrt(n)*(theta-m0)/sqrt(sigma2))
return(puiss)
}
puiss.test.moy.1(2)
puiss.test.moy.1(mmax = 2)
puiss.test.moy.1(mmax = 10)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, 4)
pval = test.moy1(x, sigma2, m0, alternative)
nb.rejets = nb.rejets + (pval<=alpha)
}
return(nb.rejets/K)
}
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=50000)
estim.prop.test.moy1 <-function(n=1000,m=5,sigma2=4,m0=5,alpha=0.05,K=100,alternative="greater"){
nb.rejets=0
for(k in 1:K){
x = rnorm(1000, 5, sqrt(sigma2))
pval = test.moy1(x, sigma2, m0, alternative)
nb.rejets = nb.rejets + (pval<=alpha)
}
return(nb.rejets/K)
}
estim.prop.test.moy1(K=10)
estim.prop.test.moy1(K=100)
estim.prop.test.moy1(K=1000)
estim.prop.test.moy1(K=50000)
m0=5
mmax = 10
theta = seq(m0,mmax,0.01)
puiss_1 = puiss.test.moy.1(alpha=0.01, mmax = mmax, m0 = m0)
puiss_5 = puiss.test.moy.1(alpha=0.05, mmax = mmax, m0 = m0)
puiss_10 = puiss.test.moy.1(alpha=0.10, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_1 type = "l", col = 1, main = "π1")
m0=5
mmax = 10
theta = seq(m0,mmax,0.01)
puiss_1 = puiss.test.moy.1(alpha=0.01, mmax = mmax, m0 = m0)
puiss_5 = puiss.test.moy.1(alpha=0.05, mmax = mmax, m0 = m0)
puiss_10 = puiss.test.moy.1(alpha=0.10, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_1, type = "l", col = 1, main = "π1")
plot(theta, puiss_5, type = "l", col = 1, main = "π5")
plot(theta, puiss_10, type = "l", col = 1, main = "π10")
m0=5
mmax = 6
theta = seq(m0,mmax,0.01)
puiss_1 = puiss.test.moy.1(alpha=0.01, mmax = mmax, m0 = m0)
puiss_5 = puiss.test.moy.1(alpha=0.05, mmax = mmax, m0 = m0)
puiss_10 = puiss.test.moy.1(alpha=0.10, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_1, type = "l", col = 1, main = "π1")
plot(theta, puiss_5, type = "l", col = 1, main = "π5")
plot(theta, puiss_10, type = "l", col = 1, main = "π10")
m0=5
mmax = 5.5
theta = seq(m0,mmax,0.01)
puiss_1 = puiss.test.moy.1(alpha=0.01, mmax = mmax, m0 = m0)
puiss_5 = puiss.test.moy.1(alpha=0.05, mmax = mmax, m0 = m0)
puiss_10 = puiss.test.moy.1(alpha=0.10, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_1, type = "l", col = 1, main = "π1")
plot(theta, puiss_5, type = "l", col = 1, main = "π5")
plot(theta, puiss_10, type = "l", col = 1, main = "π10")
m0=5
mmax = 5.5
theta = seq(m0,mmax,0.01)
puiss_n1 = puiss.test.moy.1(n=1, mmax = mmax, m0 = m0)
puiss_n5 = puiss.test.moy.1(n=5, mmax = mmax, m0 = m0)
puiss_n10 = puiss.test.moy.1(n=10, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_n1, type = "l", col = 1, main = "π1")
plot(theta, puiss_n5, type = "l", col = 1, main = "π5")
plot(theta, puiss_n10, type = "l", col = 1, main = "π10")
m0=5
mmax = 5.5
theta = seq(m0,mmax,0.01)
puiss_n10 = puiss.test.moy.1(n=10, mmax = mmax, m0 = m0)
puiss_n100 = puiss.test.moy.1(n=100, mmax = mmax, m0 = m0)
puiss_n1000 = puiss.test.moy.1(n=1000, mmax = mmax, m0 = m0)
# premier graphique
par(mfrow=c(1,2))
plot(theta, puiss_n10, type = "l", col = 1, main = "π1")
plot(theta, puiss_n100, type = "l", col = 1, main = "π5")
plot(theta, puiss_n1000, type = "l", col = 1, main = "π10")
