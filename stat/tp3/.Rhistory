m2 = m2 + x[i]**2
}
m1 = m1/n
m2 = m2/n
var = m2 - m1**2
return(var)
}
ma.variance(c(1,2,5,9,12))
var(c(1,2,5,9,12))
ma.variance = function(x) {
n = length(x)
m1 = 0
m2 = 0
for (i in 1:n) {
m1 = m1 + x[i]
m2 = m2 + x[i]**2
}
m1 = m1/n
m2 = m2/n
var = m2 - m1**2
return(m1)
}
ma.variance(c(1,2,5,9,12))
var(c(1,2,5,9,12))
mean(c(1,2,5,9,12))
help(var)
ma.variance = function(x) {
n = length(x)
m1 = 0
m2 = 0
for (i in 1:n) {
m1 = m1 + x[i]
m2 = m2 + x[i]**2
}
m1 = m1/n
m2 = m2/n
var = m2 - m1**2
return(var)
}
ma.variance(c(1,2,5,9,12))
var(c(1,2,5,9,12))
un = list(c(0, 1))
un
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
fibo = function(n) {
i = 0
u = list(c(0, 1))
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo
fibo(2)
fibo(3)
fibo(5)
y
fibo = function(n) {
i = 0
u = list(c(0, 1))
u
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo(3)
u
u = list(c(0, 1))
u[1]
u[2]
u[[1]]
u[[2]]
u = c(1, 2)
u[[1]]
fibo = function(n) {
i = 0
u = c(0, 1)
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo(3)
fibo(4)
fibo(10)
fibo(2)
fibo(1)
data(iris)
head(iris)
apply(iris[,1:4],2,sum)
apply(iris[,1:4],1,sum)
lapply(iris[,1:4],sum)
sapply(iris[,1:4],sum)
tapply(iris[,1],iris[,5],sum)
iris[, 1:4]
Exo1=function(M){
res=rep(0,5)
for (i in 1:5){
tmp=0
for (j in 1:4) {tmp = tmp + M[i,j]}
res[i]=tmp
}
return(res)
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
M
apply(M, 2, sum)
apply(M, 1, sum)
Exo1=function(M){
return(apply(M, 1, sum))
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
Exo1_eq=function(M){
return(apply(M, 1, sum))
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1_eq(M)
Exo1=function(M){
res=rep(0,5)
for (i in 1:5){
tmp=0
for (j in 1:4) {tmp = tmp + M[i,j]}
res[i]=tmp
}
return(res)
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
setwd("~/Git/julien-blanchon/Le-TP-de-Keunotor3/analyse-donnees/projet")
setwd("~/Git/julien-blanchon/Le-TP-de-Keunotor3/stat/tp3")
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(ellipse)
library(leaps)
library(MASS)
library(corrplot)
library(glmnet)
library(ellipse)
library(leaps)
library(MASS)
library(corrplot)
library(glmnet)
library(coefplot)
library(ggplot2)  # A mettre en commentaire si non utilisation des graphes ggplot
library(gridExtra)# A mettre en commentaire si non utilisation des graphes ggplot
library(ggfortify)# A mettre en commentaire si non utilisation des graphes ggplot
ozone = read.table("Ozone.txt")
library(ellipse)
library(leaps)
library(MASS)
library(corrplot)
library(glmnet)
library(coefplot)
library(ggplot2)  # A mettre en commentaire si non utilisation des graphes ggplot
library(gridExtra)# A mettre en commentaire si non utilisation des graphes ggplot
library(ggfortify)# A mettre en commentaire si non utilisation des graphes ggplot
library(plotly)   # A mettre en commentaire si non utilisation des graphes ggplot
library(reshape2)
# A COMPLETER - Faire des stat descriptives des donn√©es
summary(ozone)
ozone$vent = as.factor(ozone$vent) #IMPORTANTTTT
ozone$pluie = as.factor(ozone$pluie)
summury(ozone)
ozone$vent = as.factor(ozone$vent) #IMPORTANTTTT
ozone$pluie = as.factor(ozone$pluie)
summary(ozone)
boxplot()
boxplot(ozone)
pairs(ozone)
pairs(ozone)
plot.new()
pairs(ozone)
pairs(ozone[,1:5])
pairs(ozone[,1:5])
pairs(ozone)
barplot(ozone)
corrplot(ozone)
corrplot(cor(ozone[, 1L11]), method='ellipse')
corrplot(cor(ozone[, 1,11]), method='ellipse')
corrplot(cor(ozone[, 1:11]), method='ellipse')
ggplot(melt(ozone[, 1:11]), aes(x=variable, y=value)) + geom_violin()
e(ozone)
barplot(table(Data$Type),main="Effectifs")
barplot(table(ozone$vent),main="Effectifs")
barplot(table(ozone$vent),main="Effectifs")
barplot(table(ozone$pluie),main="Effectifs")
plot(x=ozone$maxO3, y=ozone$T12)
ggplot(ozone,aes(x=T12,y=maxO3))+
geom_point()
reg.simple = lm(formula=maxO3~T12, data = ozone)  # A COMPLETER
summary(reg.simple)
reg.simple = lm(formula=maxO3~T12, data = ozone)  # A COMPLETER
summary(reg.simple)
abline(reg.simple, col="red")
reg.simple = lm(formula=maxO3~T12, data = ozone)  # A COMPLETER
summary(reg.simple)
plot(x=ozone$maxO3, y=ozone$T12)
abline(reg.simple, col="red")
reg.simple = lm(formula=maxO3~T12, data = ozone)  # A COMPLETER
summary(reg.simple)
plot(maxO3~T12, data = ozone, pch=20)
abline(reg.simple, col="red")
reg.simple$coefficients
reg.simple$residuals
reg.simple$coefficients
reg.simple$coefficients
reg.simple$residuals
ggplot(ozone, aes(T12, maxO3))+
geom_point() +
geom_smooth(method=lm, se=TRUE)+
xlab("T12")+  ylab("maxO3")
plot(maxO3~T12,data=ozone,pch=20)
abline(reg.simple)
T12=seq(min(ozone[,"T12"]),max(ozone[,"T12"]),
length=100)
grillex<-data.frame(T12)
ICdte<-predict(reg.simple,new=grillex,
interval="confidence",level=0.95)
matlines(grillex$T12,cbind(ICdte),lty=c(1,2,2),
col="red")
autoplot(reg.simple,which=c(1,2,4),label.size=2)
temp_var = predict(reg.simple,
interval="prediction")
new_df = cbind(ozone, temp_var)
ggplot(new_df, aes(T12, maxO3))+
geom_point() +
geom_line(aes(y=lwr), color = "red",
linetype = "dashed")+
geom_line(aes(y=upr), color = "red",
linetype = "dashed")+
geom_smooth(method=lm, se=TRUE)+
xlab("T12")+
ylab("maxO3")
plot(maxO3~T12,data=ozone,pch=20)
ICprev<-predict(reg.simple,new=grillex,
interval="pred",level=0.95)
matlines(grillex$T12,cbind(ICprev),lty=c(1,2,2),
col="blue")
confint(object = reg.simple, parm = ozone$T9, level = 0.95)
confint(object = ozone, parm = ozone$T9, level = 0.95)
confint(object = reg.simple)
confint(object = reg.simple, level = 0.95)
reg.multi<-lm(formula = ozone~., data=ozone)
reg.multi<-lm(ozone~., data=ozone)
reg.multi<-lm(formula = ozone$maxO3~., data=ozone)
confint(object = reg.simple, level = 0.95)
IC = confint(object = reg.simple, level = 0.95)
df1 = as.data.frame(
rbind(coefficients(reg.simple),
ellipse(reg.simple,level=0.95)))
colnames(df1) = c("intp", "slope")
ggplot(data=df1[-1,],aes(x=intp, y=slope))+
geom_path()+
annotate("rect",xmin=IC[1,1],xmax=IC[1,2],
ymin=IC[2,1],ymax=IC[2,2],fill="red",alpha=0.1)+
geom_point(data=df1[1,], aes(x=intp, y=slope),
pch=3)
ozone1 = ozone[,1:11]
corrplot(cor(ozone1), method='ellipse')
ggplot(melt(ozone1), aes(x=variable, y=value)) + geom_violin()
reg.mul = lm(formula = ozone$maxO3~., data=ozone) # A COMPLETER
resume.mul = summary(reg.mul)
summary(reg.mul)
reg.mul$coefficients
reg.mul$residuals
reg.mul = lm(formula = maxO3~., data=ozone) # A COMPLETER
resume.mul = summary(reg.mul)
summary(reg.mul)
reg.mul$coefficients
reg.mul$residuals
summary(reg.mul$residuals)
reg.mul$coefficients
reg.mul$residuals
summary(reg.mul$residuals)
autoplot(reg.mul,which=c(1,2,4),label.size=2)
choix = regsubsets(max03~., data=fitness, nbest=1 ,nvmax=10, method="backward")
choix = regsubsets(max03~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
choix = regsubsets(ozone$max03~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
reg.mul$coefficients
reg.mul$residuals
summary(reg.mul$residuals)
autoplot(reg.mul, which=1:2, label.size=2)
choix = regsubsets(ozone1$max03~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
ozone1$max03
corrplot(cor(ozone1), method='ellipse')
ggplot(melt(ozone1), aes(x=variable, y=value)) + geom_violin()
choix = regsubsets(ozone1$maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choix)
stepAIC(...)
choix = regsubsets(ozone1$maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choix)
plot(choix, scale="bic")
stepAIC(...)
choix = regsubsets(ozone1$maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choix)
plot(choix, scale="bic")
stepAIC(...)
choix = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choix)
plot(choix, scale="bic")
stepAIC(...)
choix = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="stepwise")
choix = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choix)
plot(choix, scale="bic")
stepAIC(...)
choixf = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="forward")
summary(choixf)
plot(choixf, scale="bic")
choixb = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
summary(choixb)
plot(choixb, scale="bic")
stepAIC(...)
choixf = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="forward")
summary(choixf)
plot(choixf, scale="aic")
choixf = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="forward")
summary(choixf)
plot(choixf, scale="Cp")
choixb = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choixb, scale="bic")
stepAIC(...)
choixf = regsubsets(maxO3~., data=ozone1, nbest=1, nvmax=10, method="forward")
summary(choixf)
plot(choixf, scale="Cp")
choixb = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choixb, scale="bic")
stepAIC(reg.mul, trace=F, direction="backward)
# A COMPLETER
choixf = regsubsets(maxO3~., data=ozone1, nbest=1, nvmax=10, method="forward")
summary(choixf)
plot(choixf, scale="Cp")
choixb = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choixb, scale="bic")
stepAIC(reg.mul, trace=T, direction="backward)
# A COMPLETER
choix_cp = regsubsets(maxO3~., data=ozone1, nbest=1, nvmax=10, method="forward")
summary(choix_cp)
plot(choix_cp, scale="Cp")
choix_bic = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choix_bic, scale="bic")
library(MASS)
choix_aic = stepAIC(reg.mul, trace=T, direction="backward)
# A COMPLETER
choix_cp = regsubsets(maxO3~., data=ozone1, nbest=1, nvmax=10, method="forward")
summary(choix_cp)
plot(choix_cp, scale="Cp")
choix_bic = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choix_bic, scale="bic")
choix_aic = stepAIC(reg.mul, trace=T, direction="backward)
# A COMPLETER
reg.fin=lm(maxO3~T12+Ne9+Vx9+maxO3v,data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
reg.fin = lm(maxO3~T12+Ne9+Vx9+maxO3v, data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
choix_cp = regsubsets(maxO3~., data=ozone1, nbest=1, nvmax=10, method="backward")
summary(choix_cp)
plot(choix_cp, scale="Cp")
choix_bic = regsubsets(maxO3~., data=ozone1, nbest=1 ,nvmax=10, method="backward")
plot(choix_bic, scale="bic")
choix_aic = stepAIC(reg.mul)
# A COMPLETER
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
choix_aic = stepAIC(reg.mul)
reg.fin = lm(maxO3~T12+Ne9+Vx9+maxO3v, data=ozone1)
summary(reg.fin)
anova(reg.fin, reg.mul)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
regmultipy = sm.OLS(ozone1$maxO3~.)
lambda_seq <- 10^(seq(-4,4,0.01))
fitridge <- glmnet(x = ozone1$maxO3, y = ozone1, alpha = 0, lambda = lambda_seq,family=c("gaussian"),intercept=F) # A completer
tildeX = ozone1
tildeX = ozone1
print(ozone1)
tildeX = ozone1
tildeX[,1] = 1
print(ozone1)
tildeX = ozone1
tildeX[,1] = 1
print(tildeX)
tildeX = ozone1
tildeX[,1] = 1
tildeY = ozone1[,1]
print(tildeY)
lambda_seq <- 10^(seq(-4,4,0.01))
fitridge <- glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq,family=c("gaussian"),intercept=F) # A completer
summary(fitridge)
lambda_seq <- 10^(seq(-4,4,0.01))
fitridge <- glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq,family=c("gaussian"),intercept=F) # A completer
summary(fitridge)
print(tildeY)
lambda_seq <- 10^(seq(-4,4,0.01))
fitridge <- glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq,family=c("gaussian"),intercept=F) # A completer
summary(fitridge)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
print(tildeX)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
print(tildeY)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
View(grillex)
lambda_seq
size(lambda_seq)
length(lambda_seq)
help(glmnet)
df=data.frame(lambda = rep(fitridge$lambda,ncol(tildeX)), theta=as.vector(t(fitridge$beta)),variable=rep(colnames(tildeX),each=length(fitridge$lambda)))
lambda_seq <- 10^(seq(-4,4,0.01))
fitridge <- glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq,family=c("gaussian"),intercept=F) # A completer
summary(fitridge)
df=data.frame(lambda = rep(fitridge$lambda,ncol(tildeX)), theta=as.vector(t(fitridge$beta)),variable=rep(colnames(tildeX),each=length(fitridge$lambda)))
g1 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
ggplotly(g1)
ridge_cv <- cv.glmnet(...) # A completer
fitlasso <- glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, family=c("gaussian"), intercept=F) # A COMPLETER
summary(fitlasso)
df=data.frame(lambda = rep(fitlasso$lambda,ncol(tildeX)), theta=as.vector(t(fitlasso$beta)),variable=rep(colnames(tildeX),each=length(fitlasso$lambda)))
g3 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
ggplotly(g3)
lasso_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, family=c("mse"), intercept=F) # A COMPLETER
lasso_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, nfolds=10, family=c("mse"), intercept=F) # A COMPLETER
lasso_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A COMPLETER
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
lasso_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A COMPLETER
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
print(lambda1se)
ridge_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A completer
best_lambda <- ridge_cv$lambda.min
ridge_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 0, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A completer
best_lambda <- ridge_cv$lambda.min
print(best_lambda)
df2=data.frame(lambda=ridge_cv$lambda,MSE=ridge_cv$cvm,cvup=ridge_cv$cvup,cvlo=ridge_cv$cvlo)
gmse<-ggplot(df2)+
geom_line(aes(x=lambda,y=MSE))+
geom_vline(xintercept = ridge_cv$lambda.min,col="red",linetype="dotted")+
geom_line(aes(x=lambda,y=cvup),col="blue",linetype="dotted")+
geom_line(aes(x=lambda,y=cvlo),col="blue",linetype="dotted")+
#xlim(c(0,ridge_cv$lambda.min+0.5))+
scale_x_log10()
ggplotly(gmse)
g1=g1 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
scale_x_log10()
g1=g1 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
scale_x_log10()
lasso_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 1, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A COMPLETER
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
print(lambda1se)
g3=g3 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
geom_vline(xintercept = lambda1se,linetype="dotted", color = "blue")+
scale_x_log10()
g3
extract.coef(lasso_cv, lambda = "lambda.min")
extract.coef(lasso_cv, lambda = "lambda.lse")
extract.coef(lasso_cv, lambda = "lambda.1se")
EN_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 0.5, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F) # A COMPLETER
best_lambda <-EN_cv$lambda.min
g4=g4 + geom_vline(xintercept = best_lambda,linetype="dotted",
color = "red")
EN_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 0.5, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F)
best_lambda <-EN_cv$lambda.min
g4=g4 + geom_vline(xintercept = best_lambda,linetype="dotted",
color = "red")
fitEN <- glmnet(x = tildeX, y = tildeY, alpha = 0.5, lambda = lambda_seq, family=c("gaussian"),intercept=F)
df=data.frame(lambda = rep(fitEN$lambda,ncol(tildeX)), theta=as.vector(t(fitEN$beta)),variable=rep(c(colnames(tildeX)),each=length(fitEN$lambda)))
g4 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
EN_cv <- cv.glmnet(x = tildeX, y = tildeY, alpha = 0.5, lambda = lambda_seq, nfolds=10, type.measure=c("mse"), intercept=F)
best_lambda <-EN_cv$lambda.min
g4=g4 + geom_vline(xintercept = best_lambda,linetype="dotted",
color = "red")
ggplotly(g4)
regusuel=lm(formula=maxO3~., data = ozone)  # A COMPLETER
df4=data.frame(x=rep(colnames(tildeX),4),
coef=c(as.vector(regusuel$coefficients),as.vector(coef(ridge_cv,s=ridge_cv$lambda.min)[-1]),as.vector(coef(lasso_cv)[-1]),as.vector(coef(EN_cv)[-1])),
reg=c(rep("reg.lin",ncol(tildeX)),rep("ridge",ncol(tildeX)),rep("lasso",ncol(tildeX)),rep("ElasticNet",ncol(tildeX))))
regusuel$coefficients
