u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo
fibo(2)
fibo(3)
fibo(5)
y
fibo = function(n) {
i = 0
u = list(c(0, 1))
u
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo(3)
u
u = list(c(0, 1))
u[1]
u[2]
u[[1]]
u[[2]]
u = c(1, 2)
u[[1]]
fibo = function(n) {
i = 0
u = c(0, 1)
for (j in 3:n) {
u = c(u, u[j-2]+u[j-1])
}
return(u)
}
fibo(3)
fibo(4)
fibo(10)
fibo(2)
fibo(1)
data(iris)
head(iris)
apply(iris[,1:4],2,sum)
apply(iris[,1:4],1,sum)
lapply(iris[,1:4],sum)
sapply(iris[,1:4],sum)
tapply(iris[,1],iris[,5],sum)
iris[, 1:4]
Exo1=function(M){
res=rep(0,5)
for (i in 1:5){
tmp=0
for (j in 1:4) {tmp = tmp + M[i,j]}
res[i]=tmp
}
return(res)
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
M
apply(M, 2, sum)
apply(M, 1, sum)
Exo1=function(M){
return(apply(M, 1, sum))
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
Exo1_eq=function(M){
return(apply(M, 1, sum))
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1_eq(M)
Exo1=function(M){
res=rep(0,5)
for (i in 1:5){
tmp=0
for (j in 1:4) {tmp = tmp + M[i,j]}
res[i]=tmp
}
return(res)
}
M=matrix(1:20,nrow=5,ncol=4)
Exo1(M)
setwd("~/Git/julien-blanchon/Le-TP-de-Keunotor3/analyse-donnees/projet")
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
# Procédures de sélection de variables
#step.backward = step(modellogitinter, trace = 0)
step.backward = step(modellogitinter, direction="backward", k=log(nrow(SAheart)), trace = 0)
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(bestglm)
library(ggfortify)
library(ggplot2)
library(gridExtra)
library(VGAM)
library(pROC)
data(SAheart)
SAheart$chd<-as.factor(SAheart$chd)
SAheart$famhist<-as.factor(SAheart$famhist)
summary(SAheart)
ggplot(SAheart, aes(x = chd, y = tobacco)) + geom_boxplot()
ggplot(SAheart, aes(x = chd, y = obesity)) + geom_boxplot()
ggplot(SAheart, aes(x = chd, y = obesity, fill = famhist)) + geom_boxplot()
ggplot(SAheart, aes(famhist)) + geom_bar() + xlab("famhist")
ggplot(SAheart, aes(x = chd, y = tobacco)) + geom_point() + ylab("tobacco")
ggplot(SAheart, aes(x = chd, y = obesity)) + geom_point() + ylab("obesity")
ggplot(SAheart, aes(x = chd, y = alcohol)) + geom_point() + ylab("alcohol")
chd_ldl = glm(chd~ldl, data=SAheart, family=binomial(link = "logit"))
summary(chd_ldl)
pseudoR2 = 1 - chd_ldl$deviance/chd_ldl$null.deviance
anova(glm(chd~1,data=SAheart, family=binomial(link="logit")), chd_ldl, test="Chisq")
# likelihood ratio
confint(chd_ldl, level = 0.95)
# Wald
confint.default(chd_ldl, level = 0.95)
predict(chd_ldl, newdata=data.frame(ldl=4.75), type="response")
predict(chd_ldl, newdata=data.frame(ldl=4.75), type="link")
pihat<-predict(chd_ldl, type="response")
df1<-data.frame(ldl=SAheart$ldl, pihat=pihat,
Yihat= 0+1*(pihat>0.5) ,
Yi=as.numeric(SAheart$chd)-1)
ggplot(df1)+
geom_point(aes(x=ldl,y=Yihat), col="blue")+
geom_smooth(aes(x=ldl,y=pihat), col="black")+
geom_point(aes(x=ldl,y=Yi), col="red",shape=0)+
xlab("ldl")+
ylab("pi / Yhat / Y")
df2 <- data.frame(Yi=df1$Yi, Yihat=df1$Yihat)
chd_famhist = glm(chd~famhist, data=SAheart, family=binomial(link = "logit"))
summary(chd_famhist)
pseudoR2 = 1 - chd_famhist$deviance/chd_famhist$null.deviance
seuil = (0.5+0.24)/2
modellogit = glm(chd~sbp+tobacco+ldl+adiposity+famhist+typea+obesity+alcohol+age, data=SAheart, family=binomial(link = "logit"))
summary(modellogit)
bestglm(SAheart, family=binomial, IC="AIC")
bestglm(SAheart, family=binomial, IC="BIC")
step.backward = step(modellogit)
step.backward = step(modellogit, direction="backward", k=log(nrow(SAheart)))
modelbest = glm(chd~tobacco+ldl+typea+age+famhist, data=SAheart, family=binomial(link = "logit"))
summary(modelbest)
anova(modelbest, modellogit, test="Chisq")
modellogitinter = glm(chd~.^2, data=SAheart, family=binomial(link = "logit"))
summary(modellogitinter)
# Procédures de sélection de variables
#step.backward = step(modellogitinter, trace = 0)
step.backward = step(modellogitinter, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
# Modèle retenu
modelbestinter = glm(formula = chd ~ tobacco + ldl + famhist + typea + age + ldl:famhist, family = binomial(link = "logit"), data = SAheart)
l<-300
perm<-sample(nrow(SAheart))
# Echantillon d'apprentissage
dapp<-SAheart[perm[1:l],]
# Echantillon test
dtest<-SAheart[-perm[1:l],]
# Estimation du modèle sur l'échantillon d'apprentissage
modelapp<-glm(chd~tobacco + ldl + famhist
+ typea + age,family=binomial,data=dapp)
# Prédictions sur l'échantillon test
prev<-predict(modelapp,newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
mean(as.numeric(prev>0.5)!=dtest$chd)
l<-300
perm<-sample(nrow(SAheart))
# Echantillon d'apprentissage
dapp<-SAheart[perm[1:l],]
# Echantillon test
dtest<-SAheart[-perm[1:l],]
# Estimation du modèle sur l'échantillon d'apprentissage
modelapp<-glm(chd~tobacco + ldl + famhist
+ typea + age, family=binomial, data=dapp)
# Prédictions sur l'échantillon test
prev<-predict(modelapp, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
mean(as.numeric(prev>0.5)!=dtest$chd)
# Prédiction modèle complet additif
modelapp1 <- glm(chd~. , family=binomial, data=dapp)
prev1<-predict(modelapp1, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob1 = mean(as.numeric(prev1>0.5)!=dtest$chd)
# Prédiction modèle constant
modelapp2 <- glm(chd~1 , family=binomial, data=dapp)
prev2<-predict(modelapp2, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob2 = mean(as.numeric(prev2>0.5)!=dtest$chd)
# Prédiction modèle best
modelapp3 <- modelbestinter
prev3<-predict(modelapp3, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob3 = mean(as.numeric(prev3>0.5)!=dtest$chd)
prob1
prob2
prob4
prob3
l<-300
perm<-sample(nrow(SAheart))
# Echantillon d'apprentissage
dapp<-SAheart[perm[1:l],]
# Echantillon test
dtest<-SAheart[-perm[1:l],]
# Estimation du modèle sur l'échantillon d'apprentissage
modelapp<-glm(chd~tobacco + ldl + famhist
+ typea + age, family=binomial, data=dapp)
# Prédictions sur l'échantillon test
prev<-predict(modelapp, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
mean(as.numeric(prev>0.5)!=dtest$chd)
# Prédiction modèle complet additif
modelapp1 <- glm(chd~. , family=binomial, data=dapp)
prev1<-predict(modelapp1, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob1 = mean(as.numeric(prev1>0.5)!=dtest$chd)
# Prédiction modèle constant
modelapp2 <- glm(chd~1 , family=binomial, data=dapp)
prev2<-predict(modelapp2, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob2 = mean(as.numeric(prev2>0.5)!=dtest$chd)
# Prédiction modèle best
modelapp3 <- modelbestinter
prev3<-predict(modelapp3, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob3 = mean(as.numeric(prev3>0.5)!=dtest$chd)
prob1
prob2
prob3
modelbest
modelbestinter
prob2
prob1
prob3
prev2
min(prev2)
max(prev2)
prob2
prob2
prob1
prev1
min(prev1)
max(prev1)
(min(prev1)-max(prev1))/2
(max(prev1)-min(prev1))/2
(max(prev3)-min(prev3))/2
library(pROC)
rocobj1 <- roc(dtest$chd, prev1)
rocobj2 <- roc(dtest$chd, prev2)
rocobj3 <- roc(dtest$chd, prev3)
rocobj4 <- roc(dtest$chd, prev4)
l<-300
perm<-sample(nrow(SAheart))
# Echantillon d'apprentissage
dapp<-SAheart[perm[1:l],]
# Echantillon test
dtest<-SAheart[-perm[1:l],]
# Estimation du modèle sur l'échantillon d'apprentissage
modelapp<-glm(chd~tobacco + ldl + famhist
+ typea + age, family=binomial, data=dapp)
# Prédictions sur l'échantillon test
prev<-predict(modelapp, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
mean(as.numeric(prev>0.5)!=dtest$chd)
# Prédiction modèle complet additif
modelapp1 <- glm(chd~. , family=binomial, data=dapp)
prev1<-predict(modelapp1, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob1 = mean(as.numeric(prev1>0.5)!=dtest$chd)
# Prédiction modèle constant
modelapp2 <- glm(chd~1 , family=binomial, data=dapp)
prev2<-predict(modelapp2, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob2 = mean(as.numeric(prev2>0.5)!=dtest$chd)
# Prédiction modèle bestinter
modelapp3 <- modelbestinter
prev3<-predict(modelapp3, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob3 = mean(as.numeric(prev3>0.5)!=dtest$chd)
# Prédiction modèle best
modelapp4 <- modelbest
prev4<-predict(modelapp4, newdata=dtest,
type="response")
# Calcul de la probabilité d'erreur
prob4 = mean(as.numeric(prev4>0.5)!=dtest$chd)
library(pROC)
rocobj1 <- roc(dtest$chd, prev1)
rocobj2 <- roc(dtest$chd, prev2)
rocobj3 <- roc(dtest$chd, prev3)
rocobj4 <- roc(dtest$chd, prev4)
ggroc(list(modelbest=rocobj1, modellogit=rocobj2, modelbestinter=rocobj4, random=rocobj3))
library(pROC)
rocobj1 <- roc(dtest$chd, prev1)
rocobj2 <- roc(dtest$chd, prev2)
rocobj3 <- roc(dtest$chd, prev3)
rocobj4 <- roc(dtest$chd, prev4)
ggroc(list(modelbest=rocobj4, modellogit=rocobj1, modelbestinter=rocobj3, random=rocobj2))
rmarkdown::paged_table(data.frame(modelbest = round(auc(dtest$chd, prev1),4),
modellogit = round(auc(dtest$chd, prev2),4),
modelinter = round(auc(dtest$chd, prev4),4),
random = round(auc(dtest$chd, prev3),4)))
setwd("~/Git/julien-blanchon/Le-TP-de-Keunotor3/MLG/TP - Modèle Linéaire Généralisé-20211202")
fourmis = read.table("Fourmis.txt")
?read.table
fourmis = read.table("Fourmis.txt", sep=",")
head(fourmis)
fourmis = read.table("Fourmis.txt", header=True, sep=",")
fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
head(fourmis)
fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
fourmis$Site = as.factor(fourmis$Site)
fourmis$Conditions = as.factor(fourmis$Conditions)
head(fourmis)
?glm
modpois = glm(Effectifs~Weights, family=poisson(link="log"), data=fourmis)
modpois = glm(Effectifs~Weight, family=poisson(link="log"), data=fourmis)
summary(modpois)
modpois = glm(Effectifs~., family=poisson(link="log"), data=fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
modpois = glm(Effectifs~.^2, family=poisson(link="log"), data=fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
modpois = glm(Effectifs~Conditions + Site + Conditions:Site, family=poisson(link="log"), data=fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
newx = data.frame(Site=rep(levels(Fourmis$Site),2),Conditions=rep(levels(Fourmis$Conditions),each=4))
Fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
Fourmis$Site = as.factor(Fourmis$Site)
Fourmis$Conditions = as.factor(Fourmis$Conditions)
head(Fourmis)
modpois = glm(Effectifs~Conditions + Site + Conditions:Site, family=poisson(link="log"), data=Fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
newx = data.frame(Site=rep(levels(Fourmis$Site),2),Conditions=rep(levels(Fourmis$Conditions),each=4))
newx=data.frame(newx,lambdahat=predict(modpois,newdata=newx,type="response"))
newx
Fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
Fourmis$Site = as.factor(Fourmis$Site)
Fourmis$Conditions = as.factor(Fourmis$Conditions)
head(Fourmis)
ggplot(Fourmis, aes(x = Effectifs, y = Weight, fill=Site)) + geom_boxplot()
Fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
Fourmis$Site = as.factor(Fourmis$Site)
Fourmis$Conditions = as.factor(Fourmis$Conditions)
head(Fourmis)
ggplot(Fourmis, aes(x = Effectifs, y = Conditions, fill=  Site)) + geom_boxplot()
Fourmis = read.table("Fourmis.txt", header=TRUE, sep=",")
Fourmis$Site = as.factor(Fourmis$Site)
Fourmis$Conditions = as.factor(Fourmis$Conditions)
head(Fourmis)
ggplot(Fourmis, aes(x = Effectifs, y = Weight, fill=  Site)) + geom_boxplot()
modpois = glm(Effectifs~Conditions*Site, family=poisson(link="log"), data=Fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
newx = data.frame(Site=rep(levels(Fourmis$Site),2),Conditions=rep(levels(Fourmis$Conditions),each=4))
newx = data.frame(newx,lambdahat=predict(modpois,newdata=newx,type="response"))
newx
glmInt = glm(Effectifs~Site*Conditions, offset=log(Weight), family="poisson", data=Fourmis )
summary(glmInt)
modpois = glm(Effectifs~Site*Conditions, family=poisson(link="log"), data=Fourmis)
summary(modpois)
step.backward = step(modpois, direction="backward", k=log(nrow(SAheart)), trace = 0)
step.backward
newx
floor(3.2)
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww
anova(glm(Effectifs~Site+Conditions, family=poisson(link="log"), data=Fourmis), modpois)
anova(glm(Effectifs~Site+Conditions, family=poisson(link="log"), data=Fourmis), modpois, test="Chisq")
glmInt = glm(Effectifs~Site*Conditions, offset=log(Weight), family="poisson", data=Fourmis)
summary(glmInt)
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww = data.frame(neww, Densite=neww$Yi)
neww = data.frame(Site=rep(levels(Fourmis$Site),2),Conditions=rep(levels(Fourmis$Conditions),each=4))
neww = data.frame(neww, lambdahat = predict(glmInt, newdata=neww, type="response"))
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww = data.frame(neww, Densite=neww$Yi)
neww = data.frame(Site=rep(levels(Fourmis$Site),2),Conditions=rep(levels(Fourmis$Conditions),each=4))
neww
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww = data.frame(neww, Densite=neww$Yi)
neww = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww = data.frame(neww, Densite=neww$Yi)
neww = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww = data.frame(neww, lambdahat = predict(glmInt, newdata=neww, type="response"))
neww
neww = data.frame(newx, Yi=floor(newx$lambdahat))
neww = data.frame(neww, Densite=neww$Yi)
neww = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww = data.frame(neww, densite_hat = predict(glmInt, newdata=neww, type="response"))
neww
neww = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww = data.frame(neww, densite_hat = predict(glmInt, newdata=neww, type="response"))
neww
newz = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=10)
newz = data.frame(newz, nombre_fourmis = predict(glmInt, newdata=newz, type="response"))
newz
modbinneg=glm(Effectifs~Site*Conditions, family=quasipoisson(link="log"), data=Fourmis )
summary(modbinneg)
hypertension<-read.table("hypertension.txt",header=T,colClasses=rep("factor",10))
summary(hypertension)
# A COMPLETER
hypertension<-read.table("hypertension.txt",header=T,colClasses=rep("factor",10))
summary(hypertension)
hypertension<-read.table("hypertension.txt", header=T, colClasses=rep("factor", 10))
summary(hypertension)
glmInt = glm(Effectifs~Site*Conditions, offset=log(Weight), family=quasipoisson(link="log"), data=Fourmis)
summary(glmInt)
neww2 = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww2 = data.frame(neww2, densite_hat = predict(glmInt, newdata=neww2, type="response"))
neww2
hypertension<-read.table("hypertension.txt", header=T, colClasses=rep("factor", 10))
summary(hypertension)
modelnonord <-vglm(niveau ~ ., data = hypertension, family = multinomial)
modelnonord <-vglm(niveau ~ ., data = hypertension, family = multinomial)
modelnonord
modelnonord <-vglm(niveau ~ ., data = hypertension, family = multinomial)
modelnonord
modelnonord <-vglm(niveau ~ ., data = hypertension, family = multinomial)
modelnonord
modbinneg = glm(Effectifs~Site*Conditions, family=quasipoisson(link="log"), data=Fourmis )
summary(modbinneg)
summary(modbinneg)
summary(modpois)
modelnonord <-vglm(niveau ~ ., data = hypertension, family = multinomial)
modelnonord
glmIntquasi = glm(Effectifs~Site*Conditions, offset=log(Weight), family=quasipoisson(link="log"), data=Fourmis)
summary(glmIntquasi)
neww2 = data.frame(Site=rep(levels(Fourmis$Site),2), Conditions=rep(levels(Fourmis$Conditions),each=4), Weight=1)
neww2 = data.frame(neww2, densite_hat = predict(glmInt, newdata=neww2, type="response"))
neww2
summary(modpois)
hypertension <- read.table("hypertension.txt", header=T, colClasses=rep("factor", 10))
summary(hypertension)
?family
?quasipoisson
hypertension <- read.table("hypertension.txt", header=T, colClasses=rep("factor", 10))
summary(hypertension)
# transformation en variable ordinale
hypertension$niveau = factor(hypertension$niveau, order = TRUE, levels = c("1", "2", "3","4"))
# ajustement du modèle
modelord <- vglm(niveau ~ ., data = hypertension, family = acat())
# transformation en variable ordinale
hypertension$niveau = factor(hypertension$niveau, order = TRUE, levels = c("1", "2", "3","4"))
# ajustement du modèle
modelord <- vglm(niveau ~ ., data = hypertension, family = acat())
sumary(modelord)
# transformation en variable ordinale
hypertension$niveau = factor(hypertension$niveau, order = TRUE, levels = c("1", "2", "3","4"))
# ajustement du modèle
modelord <- vglm(niveau ~ ., data = hypertension, family = acat())
summary(modelord)
modelnonord <- vglm(niveau ~ ., data = hypertension, family = multinomial)
summary(modelnonord)
# transformation en variable ordinale
hypertension$niveau = factor(hypertension$niveau, order = TRUE, levels = c("1", "2", "3","4"))
# ajustement du modèle
modelord <- vglm(niveau ~ ., data = hypertension, family = acat())
summary(modelord)
exp(0.923752)
# l'individu 13
hypertension[13,]
pi_indiv<-modelordparal@fitted.values[13,]
modelordparal = vglm(niveau ~ ., data = hypertension,family = acat(parallel=TRUE))
# l'individu 13
hypertension[13,]
pi_indiv<-modelordparal@fitted.values[13,]
print(pi_indiv)
print(cumsum(rev(pi_indiv)))
modelordparal = vglm(niveau ~ ., data = hypertension, family = acat(parallel=TRUE))
summary(modelordparal)
lrtest(modelord, modelordparal)
hypertensionbis=hypertension
hypertensionbis$niveau = (hypertension$niveau != 1)
